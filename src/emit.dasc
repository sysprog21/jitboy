#include "../src/emit.h"

#ifdef INSTRUCTION_TEST
#include "tests/instr_test.h"
#endif

/* Configure the generator */
#define DASM_FDEF static

#include "../LuaJIT/dynasm/dasm_proto.h"
#include "../LuaJIT/dynasm/dasm_x86.h"

#include <sys/mman.h>

/* Register mapping
 *
 * GBZ80                x86-64
 * ----------------     -------------
 * A                    r0b
 * B                    r1b
 * C                    r2b
 * D                    r3b
 * E                    r4b
 * H                    r5b
 * L                    r6b
 * SP                   r7w
 * aMem                 r8
 * aState               r9
 * tmp1/tmp1b/tmp1w     r10/r10b/r10w
 * tmp2/tmp2b/tmp2w     r11/r11b/r11w
 * tmp3/tmp3b/tmp3w     r12/r12b/r12w
 * (instCount)  r13
 *
 * register suffix "b" means 8-bit low; register suffix "w" means 16-bit.
 *
 * Reference:
 *   https://corsix.github.io/dynasm-doc/instructions.html
 */

    |.arch x64

    |.define    A,      r0b
    |.define    xA,     r0
    |.define    B,      r1b
    |.define    xB,     r1
    |.define    C,      r2b
    |.define    xC,     r2
    |.define    D,      r3b
    |.define    xD,     r3
    |.define    E,      r13b
    |.define    xE,     r13
    |.define    H,      r5b
    |.define    xH,     r5
    |.define    L,      r6b
    |.define    xL,     r6
    |.define    SP,     r7w
    |.define    xSP,    r7
    |.define    aMem,   r8
    |.define    aState, r9
    |.define    tmp1,   r10
    |.define    tmp1b,  r10b
    |.define    tmp1w,  r10w
    |.define    tmp2,   r11
    |.define    tmp2b,  r11b
    |.define    tmp2w,  r11w
    |.define    tmp3,   r12
    |.define    tmp3b,  r12b
    |.define    tmp3w,  r12w
    |.define    rArg1,  rdi
    |.define    rArg2,  rsi
    |.define    rArg3,  rdx
    |.define    rRet,   rax

    |.type state, gb_state, aState

    |.include dasm_macros.inc

static bool inst_nop(dasm_State **Dst, gbz80_inst *inst, uint64_t *cycles)
{
    | print "NOP"
    *cycles += inst->cycles;
    return true;
}

static bool inst_jp_target(dasm_State **Dst, gbz80_inst *inst, uint64_t *cycles)
{
    switch (inst->op1) {
    case TARGET_1:
        | 9:
        break;
    case TARGET_2:
        | 8:
        break;
    default:
        LOG_ERROR("Invalid 2nd operand to JP/CALL\n");
        return false;
    }
    return true;
}

static bool inst_jp(dasm_State **Dst, gbz80_inst *inst, uint64_t *cycles)
{
    | print "JP/CALL"

    switch(inst->op1) {
    case NONE:
        break;
    case CC_NZ:
        | jz >1
        break;
    case CC_Z:
        | jnz >1
        break;
    case CC_NC:
        | jc >1
        break;
    case CC_C:
        | jnc >1
        break;
    default:
        LOG_ERROR("Invalid 1st operand to JP/CALL\n");
        return false;
    }

    if (inst->opcode == CALL || inst->opcode == RST) {
        | print "call from "
        | sub SP, 2
        | movzx xSP, SP // and xSP, 0xFFFF
        | mov word [aMem + xSP], (uint16_t)(inst->address + inst->bytes)
#ifdef INSTRUCTION_TEST
        | mov tmp1, xSP
        | ld16 tmp1, (inst->address + inst->bytes)
#endif
    } else {
        | print "jmp from "
    }

    | printi inst->address
    | print " to "

    | add qword state->inst_count, *cycles + inst->cycles;

    switch (inst->op2) {
    case IMM8:
        | bt_call
        | return inst->address + (int8_t)inst->args[1] + 2
        break;
    case IMM16:
        | bt_call
        | return inst->args[2] * 256 + inst->args[1]
        break;
    case MEM_HL:
        | mov tmp1, xH
        | shl tmp1, 8
        | add tmp1, xL
        | bt_call
        | return tmp1
        break;
    case MEM_0x00:
        | bt_call
        | return 0x00
        break;
    case MEM_0x08:
        | bt_call
        | return 0x08
        break;
    case MEM_0x10:
        | bt_call
        | return 0x10
        break;
    case MEM_0x18:
        | bt_call
        | return 0x18
        break;
    case MEM_0x20:
        | bt_call
        | return 0x20
        break;
    case MEM_0x28:
        | bt_call
        | return 0x28
        break;
    case MEM_0x30:
        | bt_call
        | return 0x30
        break;
    case MEM_0x38:
        | bt_call
        | return 0x38
        break;
    case TARGET_1:
        if (inst->opcode == JP_FWD) {
            | jmp >9
        } else {
            | jmp <9
        }
        break;
    case TARGET_2:
        if (inst->opcode == JP_FWD) {
            | jmp >8
        } else {
            | jmp <8
        }
        break;
    default:
        LOG_ERROR("Invalid 2nd operand to JP/CALL\n");
        return false;
    }

    if (inst->op1 != NONE) {
        | 1:
    }
    
    *cycles += inst->alt_cycles;
    
    return true;
}

static bool inst_ret(dasm_State **Dst, gbz80_inst *inst, uint64_t *cycles)
{
    | print "RET"

    switch(inst->op1) {
    case NONE:
        break;
    case CC_NZ:
        | jz >1
        break;
    case CC_Z:
        | jnz >1
        break;
    case CC_NC:
        | jc >1
        break;
    case CC_C:
        | jnc >1
        break;
    default:
        LOG_ERROR("Invalid 1st operand to RET\n");
        return false;
    }

    if (inst->opcode == RETI) {
        | print "iret from "
    } else {
        | print "ret from "
    }
    
    | printi inst->address
    | print " to "


    if (inst->opcode == RETI) {
        | mov byte state->ime, 1
    }

    | add qword state->inst_count, *cycles + inst->cycles;
    | movzx xSP, SP // and xSP, 0xFFFF
 
    /* access two bytes seperately */
    | xor tmp1, tmp1
    | xor tmp2, tmp2
    | mov tmp3, xSP
    | add tmp3w, 1
    | mov tmp2b, [aMem + tmp3]
    | mov tmp1b, [aMem + xSP]
    | shl tmp2, 8
    | add tmp1, tmp2

    | add SP, 2
    | movzx tmp1, tmp1w //and tmp1, 0xffff
    | bt_ret
    | return tmp1

    if (inst->op1 != NONE) {
        | 1:
    }
    
    *cycles += inst->alt_cycles;
    
    return true;
}

static bool inst_ld16(dasm_State **Dst, gbz80_inst *inst, uint64_t *cycles)
{
    | print "LD16"
    switch(inst->op1) {
    case REG_BC:
        if (inst->op2 == IMM16) {
            | mov B, inst->args[2];
            | mov C, inst->args[1];
        } else {
            LOG_ERROR("Invalid 2nd operand to LD16\n");
            return false;
        }
        break;
    case REG_DE:
        if (inst->op2 == IMM16) {
            | mov D, inst->args[2];
            | mov E, inst->args[1];
        } else {
            LOG_ERROR("Invalid 2nd operand to LD16\n");
            return false;
        }
        break;
    case REG_HL:
        if (inst->op2 == IMM16) {
            | mov H, inst->args[2];
            | mov L, inst->args[1];
        } else if (inst->op2 == MEM_8) {
            /* add only the lower bytes for correct C/H status flag update */ 
            | mov tmp1, xSP
            | mov tmp2, (int8_t)inst->args[1]
            | add tmp1b, tmp2b
            | pushfq
            
            | mov tmp1, xSP
            | add tmp1, (int8_t)inst->args[1]
            | mov L, tmp1b
            | shr tmp1, 8
            | mov H, tmp1b
            | popfq
            /* set Z flag to zero */
            | clean_flag 0x40
            /* set N flag to 0 */
            | mov byte state->f_subtract, 0
        } else {
            LOG_ERROR("Invalid 2nd operand to LD16\n");
            return false;
        }
        break;
    case REG_SP:
        if (inst->op2 == IMM16) {
            | mov SP, (uint16_t)(inst->args[1] + 256 * inst->args[2]);
        } else if (inst->op2 == REG_HL) {
            | mov xSP, xH
            | shl xSP, 8
            | movzx xL, L //and xL, 0xff
            | or xSP, xL
        } else {
            LOG_ERROR("Invalid 2nd operand to LD16\n");
            return false;
        }
        break;
    case MEM_16:
        if (inst->op2 == REG_SP) {
            uint16_t addr = (uint16_t)(inst->args[1] + 256 * inst->args[2]);
            | mov word [aMem + addr], SP;
            | mov tmp1, xSP
#ifdef INSTRUCTION_TEST
            | ld16 addr, tmp1
#endif
        } else {
            LOG_ERROR("Invalid 2nd operand to LD16\n");
            return false;
        }
        break;
    default:
        LOG_ERROR("Invalid 1st operand to LD16: %i\n", inst->op1);
        return false;
    }
    *cycles += inst->cycles;
    return true;
}

static bool inst_push(dasm_State **Dst, gbz80_inst *inst, uint64_t *cycles) {
    | print "PUSH"
    switch (inst->op1) {
    case REG_AF:
        | pushfq
        | pop tmp1
        | mov tmp3, 0
        // CF
        | mov tmp2, tmp1
        | and tmp2, 0x1
        | shl tmp2, 4
        | or tmp3, tmp2
        // AF, ZF
        | mov tmp2, tmp1
        | and tmp2, 0x50
        | shl tmp2, 1
        | or tmp3, tmp2
        // SF
        | mov tmp2b, state->f_subtract
        | and tmp2, 0x01
        | shl tmp2, 6
        | or tmp3, tmp2
        | sub SP, 2
        | mov [aMem + xSP + 1], A
        | mov [aMem + xSP], tmp3b
#ifdef INSTRUCTION_TEST
        | mov tmp1, xSP
        | write_byte tmp1, tmp3
        | inc tmp1
        | write_byte tmp1, xA
#endif
        break;
    case REG_BC:
        | sub SP, 2
        | mov [aMem + xSP + 1], B
        | mov [aMem + xSP], C
#ifdef INSTRUCTION_TEST
        | mov tmp1, xSP
        | write_byte tmp1, xC
        | inc tmp1
        | write_byte tmp1, xB
#endif
        break;
    case REG_DE:
        | sub SP, 2
        | mov [aMem + xSP + 1], D
        | mov [aMem + xSP], E
#ifdef INSTRUCTION_TEST
        | mov tmp1, xSP
        | write_byte tmp1, xE
        | inc tmp1
        | write_byte tmp1, xD
#endif
        break;
    case REG_HL:
        | sub SP, 2
        | mov [aMem + xSP + 1], H
        | mov [aMem + xSP], L
#ifdef INSTRUCTION_TEST
        | mov tmp1, xSP
        | mov tmp2 , xL
        | write_byte tmp1, tmp2
        | inc tmp1
        | write_byte tmp1, xH
#endif
        break;
    default:
        LOG_ERROR("Invalid operand to PUSH\n");
        return false;
    }
    *cycles += inst->cycles;
    return true;
}

static bool inst_pop(dasm_State **Dst, gbz80_inst *inst, uint64_t *cycles)
{
    | print "POP"
    switch (inst->op1) {
    case REG_AF:
        | mov tmp1, xSP
        | add tmp1w, 1
        | mov A, [aMem + tmp1]
        | mov tmp1b, [aMem + xSP]
        | add SP, 2
        | pushfq
        | pop tmp3
        | and tmp3, ~0xD1
        // CF
        | mov tmp2, tmp1
        | and tmp2, 0x10
        | shr tmp2, 4
        | or tmp3, tmp2
        // AF, ZF
        | mov tmp2, tmp1
        | and tmp2, 0xA0
        | shr tmp2, 1
        | or tmp3, tmp2
        // SF
        | mov tmp2, tmp1
        | and tmp2, 0x40
        | shr tmp2, 6
        | mov byte state->f_subtract, tmp2b
        | push tmp3
        | popfq
        break;
    case REG_BC:
        | mov tmp1, xSP
        | add tmp1w, 1
        | mov B, [aMem + tmp1]
        | mov C, [aMem + xSP]
        | add SP, 2
        break;
    case REG_DE:
        | mov tmp1, xSP
        | add tmp1w, 1
        | mov D, [aMem + tmp1]
        | mov E, [aMem + xSP]
        | add SP, 2
        break;
    case REG_HL:
        | mov tmp1, xSP
        | add tmp1w, 1
        | mov H, [aMem + tmp1]
        | mov L, [aMem + xSP]
        | add SP, 2
        break;
    default:
        LOG_ERROR("Invalid operand to PUSH\n");
        return false;
    }
    *cycles += inst->cycles;
    return true;
}

static bool inst_ld(dasm_State **Dst, gbz80_inst *inst, uint64_t *cycles)
{
    | print "LD"
    | inst mov, inst->op1, inst->op2
    *cycles += inst->cycles;
    return true;
}

static bool inst_inc(dasm_State **Dst, gbz80_inst *inst, uint64_t *cycles)
{
    | print "INC"
    | inst1 inc, inst->op1
    | pushfq
    | mov byte state->f_subtract, 0
    | popfq
    *cycles += inst->cycles;
    return true;
}

static bool inst_dec(dasm_State **Dst, gbz80_inst *inst, uint64_t *cycles)
{
    | print "DEC"
    | inst1 dec, inst->op1
    | pushfq
    | mov byte state->f_subtract, 1
    | popfq
    *cycles += inst->cycles;
    return true;
}

static bool inst_dec16(dasm_State **Dst, gbz80_inst *inst, uint64_t *cycles)
{
    | print "DEC16"
    switch (inst->op1) {
    case REG_BC:
        | mov tmp2, xB
        | shl tmp2, 8
        | mov tmp1, xC
        | add tmp1, tmp2
        | dec tmp1
        | mov C, tmp1b
        | shr tmp1, 8
        | mov B, tmp1b
        break;
    case REG_DE:
        | mov tmp2, xD
        | shl tmp2, 8
        | mov tmp1, xE
        | add tmp1, tmp2
        | dec tmp1
        | mov E, tmp1b
        | shr tmp1, 8
        | mov D, tmp1b
        break;
    case REG_HL:
        | mov tmp2, xH
        | shl tmp2, 8
        | mov tmp1, xL
        | add tmp1, tmp2
        | dec tmp1
        | mov L, tmp1b
        | shr tmp1, 8
        | mov H, tmp1b
        break;
    case REG_SP:
        | dec SP
        break;
    default:
        LOG_ERROR("Invalid operand to DEC16\n");
        return false;
    }
    *cycles += inst->cycles;
    return true;
}

static bool inst_inc16(dasm_State **Dst, gbz80_inst *inst, uint64_t *cycles)
{
    | print "INC16"
    switch (inst->op1) {
    case REG_BC:
        | mov tmp2, xB
        | shl tmp2, 8
        | mov tmp1, xC
        | add tmp1, tmp2
        | inc tmp1
        | mov C, tmp1b
        | shr tmp1, 8
        | mov B, tmp1b
        break;
    case REG_DE:
        | mov tmp2, xD
        | shl tmp2, 8
        | mov tmp1, xE
        | add tmp1, tmp2
        | inc tmp1
        | mov E, tmp1b
        | shr tmp1, 8
        | mov D, tmp1b
        break;
    case REG_HL:
        | mov tmp2, xH
        | shl tmp2, 8
        | mov tmp1, xL
        | add tmp1, tmp2
        | inc tmp1
        | mov L, tmp1b
        | shr tmp1, 8
        | mov H, tmp1b
        break;
    case REG_SP:
        | inc SP
        break;
    default:
        LOG_ERROR("Invalid operand to INC16\n");
        return false;
    }
    *cycles += inst->cycles;
    return true;
}

static bool inst_add16(dasm_State **Dst, gbz80_inst *inst, uint64_t *cycles)
{
    | print "ADD16"
    | mov byte state->f_subtract, 0 
    switch (inst->op1) {
    case REG_HL:
        /* get and push zero flag status */
        | pushfq
        | pop tmp1
        | and tmp1b, 0x40
        | push tmp1 

        | movzx xH, H // and xH, 0xff
        | movzx xL, L // and xL, 0xFF
        | mov tmp2, xH
        | shl tmp2, 8
        | mov tmp1, xL
        | or tmp1, tmp2
        /* save another copy for old HL to check half-carry */
        | push tmp1
        switch (inst->op2) {
        case REG_BC:
            | movzx xB, B // and xB, 0xff
            | movzx xC, C // and xC, 0xff
            | mov tmp3, xB
            | shl tmp3, 8
            | mov tmp2, xC
            | or tmp2, tmp3
            break;
        case REG_DE:
            | movzx xD, D // and xD, 0xff
            | movzx xE, E // and xE, 0xff
            | mov tmp3, xD
            | shl tmp3, 8
            | mov tmp2, xE
            | or tmp2, tmp3
            break;
        case REG_HL:
            | mov tmp2, tmp1
            break;
        case REG_SP:
            | mov tmp2, xSP
            break;
        default:
            LOG_ERROR("Invalid 2nd operand to ADD16\n");
            return false;
        }
        | add tmp1w, tmp2w
        | pop tmp3
        | pushfq
        /* deal with half-carry flag for 16 bits add by tmp3 */
        | xor tmp3w, tmp1w
        | xor tmp3w, tmp2w
        | and tmp3w, 0x1000
        | shr tmp3w, 8
        | mov L, tmp1b
        | shr tmp1, 8
        | mov H, tmp1b
        /* pop for status flag */
        | pop tmp1
        /* pop for zero flag status */
        | pop tmp2

        | and tmp1b, ~0x50
        | or tmp1b, tmp2b
        | or tmp1b, tmp3b
        | push tmp1
        | popfq
        break;
    case REG_SP:
        if (inst->op2 != IMM8) {
            LOG_ERROR("Invalid 2nd operand to ADD16\n");
            return false;
        }
        /* add only the lower bytes for correct C/H status flag update */
        | mov tmp1, xSP
        | mov tmp2, (int8_t)inst->args[1]
        | add tmp1b, tmp2b
        | pushfq
         
        | add SP, (int8_t)inst->args[1]
        | popfq
        /* set Z flag to zero */
        | clean_flag 0x40
        break;
    default:
        LOG_ERROR("Invalid 1st operand to ADD16\n");
        return false;
    }
    *cycles += inst->cycles;
    return true;
}

static bool inst_di(dasm_State **Dst, gbz80_inst *inst, uint64_t *cycles)
{
    | print "DI"
    | mov byte state->ime, 0
    *cycles += inst->cycles;
    return true;
}

static bool inst_ei(dasm_State **Dst, gbz80_inst *inst, uint64_t *cycles)
{
    *cycles += inst->cycles;
    | print "EI"
    | mov byte state->ime, 1
    | add qword state->inst_count, *cycles
    | return inst->address + inst->bytes;
    return true;
}

static bool inst_cpl(dasm_State **Dst, gbz80_inst *inst, uint64_t *cycles)
{
    *cycles += inst->cycles;
    | print "CPL"
    | mov byte state->f_subtract, 1
    | not A
    /* set H flag */
    | set_flag 0x10
    return true;
}

static bool inst_cp(dasm_State **Dst, gbz80_inst *inst, uint64_t *cycles)
{
    | print "CP"
    | mov byte state->f_subtract, 1
    | inst cmp, inst->op1, inst->op2
    *cycles += inst->cycles;
    return true;
}

static bool inst_or(dasm_State **Dst, gbz80_inst *inst, uint64_t *cycles)
{
    | print "OR"
    | mov byte state->f_subtract, 0
    | inst or, inst->op1, inst->op2
    *cycles += inst->cycles;
    return true;
}

static bool inst_and(dasm_State **Dst, gbz80_inst *inst, uint64_t *cycles)
{
    | print "AND"
    | mov byte state->f_subtract, 0
    | inst and, inst->op1, inst->op2
    /* set H flag */
    | set_flag 0x10
    *cycles += inst->cycles;
    return true;
}

static bool inst_xor(dasm_State **Dst, gbz80_inst *inst, uint64_t *cycles)
{
    | print "XOR"
    | mov byte state->f_subtract, 0
    | inst xor, inst->op1, inst->op2
    *cycles += inst->cycles;
    return true;
}

static bool inst_sub(dasm_State **Dst, gbz80_inst *inst, uint64_t *cycles)
{
    | print "SUB"
    | mov byte state->f_subtract, 1
    | inst sub, inst->op1, inst->op2
    *cycles += inst->cycles;
    return true;
}

static bool inst_add(dasm_State **Dst, gbz80_inst *inst, uint64_t *cycles)
{
    | print "ADD"
    | mov byte state->f_subtract, 0
    | inst add, inst->op1, inst->op2
    *cycles += inst->cycles;
    return true;
}

static bool inst_adc(dasm_State **Dst, gbz80_inst *inst, uint64_t *cycles)
{
    | print "ADC"
    | mov byte state->f_subtract, 0
    | inst adc, inst->op1, inst->op2
    *cycles += inst->cycles;
    return true;
}

static bool inst_bit(dasm_State **Dst, gbz80_inst *inst, uint64_t *cycles)
{
    | print "BIT"
    /* get C flag and save it */
    | pushfq
    | pop tmp1
    | and tmp1b, 0x01
    | push tmp1

    | mov byte state->f_subtract, 0
    | bitinst test, inst->op1, inst->op2,
    
    | pushfq
    /* pop for status flag */
    | pop tmp1
    /* pop for C flag */
    | pop tmp2
    | and tmp1b, ~0x01
    | or tmp1b, tmp2b 
    /* set H flag to 1 */
    | or tmp1b, 0x10
    | push tmp1
    | popfq

    *cycles += inst->cycles;
    return true;
}

static bool inst_ccf(dasm_State **Dst, gbz80_inst *inst, uint64_t *cycles)
{
    | print "CCF"
    | mov byte state->f_subtract, 0
    | cmc 
    /* clean H flag */
    | clean_flag 0x10
    *cycles += inst->cycles;
    return true;
}

static bool inst_res(dasm_State **Dst, gbz80_inst *inst, uint64_t *cycles)
{
    | print "RES"
    | bitinst and, inst->op1, inst->op2, ~
    *cycles += inst->cycles;
    return true;
}

static bool inst_rr(dasm_State **Dst, gbz80_inst *inst, uint64_t *cycles)
{
    | print "RR"
    | mov byte state->f_subtract, 0
    | inst2, rcr, inst->op1, 1
    | pushfq 
    | pop tmp1
    /* clean Z/H flag to zero */
    | and tmp1, ~0x50
    | push tmp1

    switch (inst->op1) {
    case REG_A:
        | test A, A
        break;
    case REG_B:
        | test B, B
        break;
    case REG_C:
        | test C, C
        break;
    case REG_D:
        | test D, D
        break;
    case REG_E:
        | test E, E
        break;
    case REG_H:
        | test H, H
        break;
    case REG_L:
        | test L, L
        break;
    case MEM_HL:
        | movzx xL, L // and xL, 0xff
        | movzx xH, H // and xH, 0xff
        | mov tmp2, xH
        | shl tmp2, 8
        | mov tmp1, xL
        | add tmp1, tmp2
        | cmp byte [aMem + tmp1], 0
        break;
    default:
        LOG_ERROR("Invalid operand.\n");
        return false;
    }

    | pop tmp1
    | jne >1
    /* set Z flag to one */
    | or tmp1, 0x40
    | 1:
    | push tmp1
    | popfq
    
    *cycles += inst->cycles;
    return true;
}

static bool inst_rra(dasm_State **Dst, gbz80_inst *inst, uint64_t *cycles)
{
    | print "RRA"
    | mov byte state->f_subtract, 0
    | inst2, rcr, inst->op1, 1
    
    /* set zero and half-carry flag to zero */  
    | clean_flag 0x50
    
    *cycles += inst->cycles;
    return true;
}

static bool inst_rl(dasm_State **Dst, gbz80_inst *inst, uint64_t *cycles)
{
    | print "RL"
    | mov byte state->f_subtract, 0
    | inst2, rcl, inst->op1, 1
    | pushfq 
    | pop tmp1
    /* clean Z/H flag to zero */
    | and tmp1, ~0x50
    | push tmp1

    switch (inst->op1) {
    case REG_A:
        | test A, A
        break;
    case REG_B:
        | test B, B
        break;
    case REG_C:
        | test C, C
        break;
    case REG_D:
        | test D, D
        break;
    case REG_E:
        | test E, E
        break;
    case REG_H:
        | test H, H
        break;
    case REG_L:
        | test L, L
        break;
    case MEM_HL:
        | movzx xL, L // and xL, 0xff
        | movzx xH, H // and xH, 0xff
        | mov tmp2, xH
        | shl tmp2, 8
        | mov tmp1, xL
        | add tmp1, tmp2
        | cmp byte [aMem + tmp1], 0
        break;
    default:
        LOG_ERROR("Invalid operand.\n");
        return false;
    }

    | pop tmp1
    | jne >1
    /* set Z flag to one */
    | or tmp1, 0x40
    | 1:
    | push tmp1
    | popfq
    
    *cycles += inst->cycles;
    return true;
}

static bool inst_rla(dasm_State **Dst, gbz80_inst *inst, uint64_t *cycles)
{
    | print "RLA"
    | mov byte state->f_subtract, 0
    | inst2, rcl, inst->op1, 1
    
    /* set zero and half-carry flag to zero */  
    | clean_flag 0x50
    
    *cycles += inst->cycles;
    return true;
}

static bool inst_rrc(dasm_State **Dst, gbz80_inst *inst, uint64_t *cycles)
{
    | print "RRC"
    | mov byte state->f_subtract, 0
    | inst2, ror, inst->op1, 1
    | pushfq 
    | pop tmp1
    /* clean Z/H flag to zero */
    | and tmp1, ~0x50
    | push tmp1

    switch (inst->op1) {
    case REG_A:
        | test A, A
        break;
    case REG_B:
        | test B, B
        break;
    case REG_C:
        | test C, C
        break;
    case REG_D:
        | test D, D
        break;
    case REG_E:
        | test E, E
        break;
    case REG_H:
        | test H, H
        break;
    case REG_L:
        | test L, L
        break;
    case MEM_HL:
        | movzx xL, L // and xL, 0xff
        | movzx xH, H // and xH, 0xff
        | mov tmp2, xH
        | shl tmp2, 8
        | mov tmp1, xL
        | add tmp1, tmp2
        | cmp byte [aMem + tmp1], 0
        break;
    default:
        LOG_ERROR("Invalid operand.\n");
        return false;
    }

    | pop tmp1
    | jne >1
    /* set Z flag to one */
    | or tmp1, 0x40
    | 1:
    | push tmp1
    | popfq
 
    *cycles += inst->cycles;
    return true;
}

static bool inst_rrca(dasm_State **Dst, gbz80_inst *inst, uint64_t *cycles)
{
    | print "RRCA"
    | mov byte state->f_subtract, 0
    | inst2, ror, inst->op1, 1
    
     /* set zero and half-carry flag to zero */  
    | clean_flag 0x50
    
    *cycles += inst->cycles;
    return true;
}

static bool inst_rlc(dasm_State **Dst, gbz80_inst *inst, uint64_t *cycles)
{
    | print "RLC"
    | mov byte state->f_subtract, 0
    | inst2, rol, inst->op1, 1
    | pushfq 
    | pop tmp1
    /* clean Z/H flag to zero */
    | and tmp1, ~0x50
    | push tmp1

    switch (inst->op1) {
    case REG_A:
        | test A, A
        break;
    case REG_B:
        | test B, B
        break;
    case REG_C:
        | test C, C
        break;
    case REG_D:
        | test D, D
        break;
    case REG_E:
        | test E, E
        break;
    case REG_H:
        | test H, H
        break;
    case REG_L:
        | test L, L
        break;
    case MEM_HL:
        | movzx xL, L // and xL, 0xff
        | movzx xH, H // and xH, 0xff
        | mov tmp2, xH
        | shl tmp2, 8
        | mov tmp1, xL
        | add tmp1, tmp2
        | cmp byte [aMem + tmp1], 0
        break;
    default:
        LOG_ERROR("Invalid operand.\n");
        return false;
    }

    | pop tmp1
    | jne >1
    /* set Z flag to one */
    | or tmp1, 0x40
    | 1:
    | push tmp1
    | popfq

    *cycles += inst->cycles;
    return true;
}

static bool inst_rlca(dasm_State **Dst, gbz80_inst *inst, uint64_t *cycles)
{
    | print "RLCA"
    | mov byte state->f_subtract, 0
    | inst2, rol, inst->op1, 1
    
    /* set zero and half-carry flag to zero */  
    | clean_flag 0x50
    
    *cycles += inst->cycles;
    return true;
}

static bool inst_sbc(dasm_State **Dst, gbz80_inst *inst, uint64_t *cycles)
{
    | print "SBC"
    | mov byte state->f_subtract, 1
    | inst sbb, inst->op1, inst->op2
    *cycles += inst->cycles;
    return true;
}

static bool inst_set(dasm_State **Dst, gbz80_inst *inst, uint64_t *cycles)
{
    | print "SET"
    | bitinst or, inst->op1, inst->op2,
    *cycles += inst->cycles;
    return true;
}

static bool inst_sla(dasm_State **Dst, gbz80_inst *inst, uint64_t *cycles)
{
    | print "SLA"
    | mov byte state->f_subtract, 0
    | inst2, sal, inst->op1, 1
    *cycles += inst->cycles;
    return true;
}

static bool inst_sra(dasm_State **Dst, gbz80_inst *inst, uint64_t *cycles)
{
    | print "SRA"
    | mov byte state->f_subtract, 0
    | inst2, sar, inst->op1, 1
    *cycles += inst->cycles;
    return true;
}

static bool inst_srl(dasm_State **Dst, gbz80_inst *inst, uint64_t *cycles)
{
    | print "SRL"
    | mov byte state->f_subtract, 0
    | inst2, shr, inst->op1, 1
    *cycles += inst->cycles;
    return true;
}

static bool inst_scf(dasm_State **Dst, gbz80_inst *inst, uint64_t *cycles)
{
    | print "SCF"
    | mov byte state->f_subtract, 0
    | stc
    /* clean H flag */
    | clean_flag 0x10
    *cycles += inst->cycles;
    return true;
}

// source: http://stackoverflow.com/questions/8119577/z80-daa-instruction
static bool inst_daa(dasm_State **Dst, gbz80_inst *inst, uint64_t *cycles)
{
    | print "DAA"
    
    /* tmp3 represent current status flag of Game Boy */
    | pushfq
    | pop tmp3

    /* make two copy of register A */
    | mov tmp1b, A
    | mov tmp2b, A
    | movzx xA, A // and xA, 0xff
 
    /* determine if the previous operation is substract or not */ 
    | test byte state->f_subtract, 1
    | jz >2
    
    /* when the previous operation is subtract */ 
    /* if H flag is not set, jump to next branch */
    | test tmp3w, 0x10
    | jz >3
    /* if H flag is set, A = A - 0x6 */
    | sub xA, 0x6
    | movzx xA, A // and xA, 0xff

    /* if C flag is not set, jump to set final status flag */
    | 3:
    | test tmp3w, 0x1
    | jz >1
    /* if C flag is set, A = A - 0x60 */
    | sub xA, 0x60
    | jmp >1

    /* when addition condition */
    | 2:
    /* if H flag is set, jump to set A, A = A + 0x6 */
    | test tmp3w, 0x10
    | jnz >2
    /* or if lower 4 bits are greater than 0x9, A = A + 0x6 */
    | and tmp1, 0x0f
    | cmp tmp1, 0x9
    | jle >3
    | add xA, 0x6
    | jmp >3
    | 2:
    | add xA, 0x6

    | 3:
    /* if C flag is set, jump to set A, A = A + 0x60 */
    | test tmp3w, 0x1
    | jnz >2
    /* or if higher 4 bits are greater than 0x9, A = A + 0x60 */
    | and tmp2, 0x0f0
    | cmp tmp2, 0x9f
    | jle >1
    | add xA, 0x60
    | jmp >1
    | 2:
    | add xA, 0x60

    /* set our final status flags */
    | 1:
    /* reset H flag and Z flag */
    | and tmp3w, ~0x50
    
    /* set the C flag */
    | test xA, 0x100
    | jz >1
    | or tmp3w, 0x1
    
    /* if A is zero, set the Z flag */
    | 1:
    | test A, A
    | jnz >1
    | or tmp3w, 0x40
    | 1:
    | push tmp3
    | popfq

    *cycles += inst->cycles;
    return true;
}

static bool inst_swap(dasm_State **Dst, gbz80_inst *inst, uint64_t *cycles)
{
    | print "SWAP"
    | mov byte state->f_subtract, 0
    switch (inst->op1) {
    case REG_A:
        | mov tmp1, xA
        | shl A, 4
        | shr tmp1b, 4
        | or A, tmp1b
        break;
    case REG_B:
        | mov tmp1, xB
        | shl B, 4
        | shr tmp1b, 4
        | or B, tmp1b
        break;
    case REG_C:
        | mov tmp1, xC
        | shl C, 4
        | shr tmp1b, 4
        | or C, tmp1b
        break;
    case REG_D:
        | mov tmp1, xD
        | shl D, 4
        | shr tmp1b, 4
        | or D, tmp1b
        break;
    case REG_E:
        | mov tmp1, xE
        | shl E, 4
        | shr tmp1b, 4
        | or E, tmp1b
        break;
    case REG_H:
        | mov tmp1, xH
        | shl H, 4
        | shr tmp1b, 4
        | or H, tmp1b
        break;
    case REG_L:
        | mov tmp1, xL
        | shl L, 4
        | shr tmp1b, 4
        | or L, tmp1b
        break;
    case MEM_HL:
        | movzx xL, L // and xL, 0xff
        | movzx xH, H // and xH, 0xff
        | mov tmp2, xH
        | shl tmp2, 8
        | mov tmp1, xL
        | add tmp1, tmp2
        | mov tmp2b, [aMem + tmp1]
        | shl byte [aMem + tmp1], 4
        | shr tmp2b, 4
        | or [aMem + tmp1], tmp2b
#ifdef INSTRUCTION_TEST
        | write_byte, tmp1, [aMem + tmp1]
#endif
        break;
    default:
        LOG_ERROR("Invalid operand to swap.\n");
        return false;
    }
    *cycles += inst->cycles;
    return true;
}

static bool inst_halt(dasm_State **Dst, gbz80_inst *inst, uint64_t *cycles)
{
    | print "HALT"
    *cycles += inst->cycles;
    switch(inst->op1) {
    case NONE:
        | mov dword state->halt, 1
        break;
    case WAIT_STAT3:
        | mov dword state->halt, WAIT_STAT3
        break;
    case WAIT_LY:
        | mov dword state->halt, WAIT_LY
        | mov byte state->halt_arg, inst->args[3]
        break;
    default:
        LOG_ERROR("Invalid operand to halt.\n");
        return false;
    }
    | add qword state->inst_count, *cycles
    | return inst->address + inst->bytes
    return true;
}

static bool inst_stop(dasm_State **Dst, gbz80_inst *inst, uint64_t *cycles)
{
    | print "STOP"
    // TODO: wake up if button pressed
    *cycles += inst->cycles;
    | mov byte state->halt, 1
    | add qword state->inst_count, *cycles
    | return inst->address
    return true;
}

#ifdef INSTRUCTION_TEST
static bool inst_set_flag(dasm_State **Dst, gbz80_inst *inst, uint64_t *cycles)
{
    | mov ah, inst->args[0] 
    | sahf
    return true;
}

static bool inst_load_flag(dasm_State **Dst, gbz80_inst *inst, uint64_t *cycles)
{
    | lahf
    | restore_flag r0
    return true;
}
#endif

bool emit(gb_block *block, GList *inst)
{
    dasm_State *d;
    uint32_t npc = 4;
    uint64_t cycles = 0;
    uint16_t end_address = 0;

    |.section code
    dasm_init(&d, DASM_MAXSECTION);

    |.globals lbl_
    void *labels[lbl__MAX];
    dasm_setupglobal(&d, labels, lbl__MAX);

    |.actionlist gb_actions
    dasm_setup(&d, gb_actions);

    dasm_growpc(&d, npc);

    dasm_State **Dst = &d;
    |.code
    |->f_start:
    | prologue

    for (; inst; inst = inst->next) {
        end_address = DATA(inst)->address + DATA(inst)->bytes - 1;
        
        if (DATA(inst)->flags & INST_FLAG_RESTORE_CC) {
            | popfq
            | pushfq
        }

        switch (DATA(inst)->opcode) {
#ifdef INSTRUCTION_TEST        
        case LD_F:
            if (!inst_load_flag(Dst, DATA(inst), &cycles))
                goto exit_fail;
            break;
        case SET_F:
            if (!inst_set_flag(Dst, DATA(inst), &cycles))
                goto exit_fail;
            break;
#endif
        case NOP:
            if (!inst_nop(Dst, DATA(inst), &cycles))
                goto exit_fail;
            break;
        case HALT:
            if (!inst_halt(Dst, DATA(inst), &cycles))
                goto exit_fail;
            break;
        case STOP:
            if (!inst_stop(Dst, DATA(inst), &cycles))
                goto exit_fail;
            break;
        case LD16:
            if (!inst_ld16(Dst, DATA(inst), &cycles))
                goto exit_fail;
            break;
        case LD:
            if (!inst_ld(Dst, DATA(inst), &cycles))
                goto exit_fail;
            break;
        case INC16:
            if (!inst_inc16(Dst, DATA(inst), &cycles))
                goto exit_fail;
            break;
        case INC:
            if (!inst_inc(Dst, DATA(inst), &cycles))
                goto exit_fail;
            break;
        case DEC16:
            if (!inst_dec16(Dst, DATA(inst), &cycles))
                goto exit_fail;
            break;
        case DEC:
            if (!inst_dec(Dst, DATA(inst), &cycles))
                goto exit_fail;
            break;
        case JP_TARGET:
            if (!inst_jp_target(Dst, DATA(inst), &cycles))
                goto exit_fail;
            break;
        case JP_BWD:
        case JP_FWD:
        case JP:
        case JR:
        case CALL:
        case RST:
            if (!inst_jp(Dst, DATA(inst), &cycles))
                goto exit_fail;
            break;
        case DAA:
            if (!inst_daa(Dst, DATA(inst), &cycles))
                goto exit_fail;
            break;
        case DI:
            if (!inst_di(Dst, DATA(inst), &cycles))
                goto exit_fail;
            break;
        case EI:
            if (!inst_ei(Dst, DATA(inst), &cycles))
                goto exit_fail;
            break;
        case CPL:
            if (!inst_cpl(Dst, DATA(inst), &cycles))
                goto exit_fail;
            break;
        case SUB:
            if (!inst_sub(Dst, DATA(inst), &cycles))
                goto exit_fail;
            break;
        case CP:
            if (!inst_cp(Dst, DATA(inst), &cycles))
                goto exit_fail;
            break;
        case CCF:
            if (!inst_ccf(Dst, DATA(inst), &cycles))
                goto exit_fail;
            break;
        case OR:
            if (!inst_or(Dst, DATA(inst), &cycles))
                goto exit_fail;
            break;
        case AND:
            if(!inst_and(Dst, DATA(inst), &cycles))
                goto exit_fail;
            break;
        case XOR:
            if (!inst_xor(Dst, DATA(inst), &cycles))
                goto exit_fail;
            break;
        case PUSH:
            if (!inst_push(Dst, DATA(inst), &cycles))
                goto exit_fail;
            break;
        case POP:
            if (!inst_pop(Dst, DATA(inst), &cycles))
                goto exit_fail;
            break;
        case RET:
        case RETI:
            if (!inst_ret(Dst, DATA(inst), &cycles))
                goto exit_fail;
            break;
        case ADD16:
            if (!inst_add16(Dst, DATA(inst), &cycles))
                goto exit_fail;
            break;
        case ADD:
            if (!inst_add(Dst, DATA(inst), &cycles))
                goto exit_fail;
            break;
        case ADC:
            if (!inst_adc(Dst, DATA(inst), &cycles))
                goto exit_fail;
            break;
        case BIT:
            if (!inst_bit(Dst, DATA(inst), &cycles))
                goto exit_fail;
            break;
        case RES:
            if (!inst_res(Dst, DATA(inst), &cycles))
                goto exit_fail;
            break;
        case RR:
            if (!inst_rr(Dst, DATA(inst), &cycles))
                goto exit_fail;
            break;
        case RRA:
            if (!inst_rra(Dst, DATA(inst), &cycles))
                goto exit_fail;
            break;
        case RL:
            if (!inst_rl(Dst, DATA(inst), &cycles))
                goto exit_fail;
            break;
        case RLA:
            if (!inst_rla(Dst, DATA(inst), &cycles))
                goto exit_fail;
            break;
        case RRC:
            if(!inst_rrc(Dst, DATA(inst), &cycles))
                goto exit_fail;
            break;
        case RRCA:
            if(!inst_rrca(Dst, DATA(inst), &cycles))
                goto exit_fail;
            break;
        case RLC:
            if (!inst_rlc(Dst, DATA(inst), &cycles))
                goto exit_fail;
            break;
        case RLCA:
            if (!inst_rlca(Dst, DATA(inst), &cycles))
                goto exit_fail;
            break;
        case SBC:
            if (!inst_sbc(Dst, DATA(inst), &cycles))
                goto exit_fail;
            break;
        case SCF:
            if (!inst_scf(Dst, DATA(inst), &cycles))
                goto exit_fail;
            break;
        case SET:
            if (!inst_set(Dst, DATA(inst), &cycles))
                goto exit_fail;
            break;
        case SLA:
            if (!inst_sla(Dst, DATA(inst), &cycles))
                goto exit_fail;
            break;
        case SRA:
            if (!inst_sra(Dst, DATA(inst), &cycles))
                goto exit_fail;
            break;
        case SRL:
            if (!inst_srl(Dst, DATA(inst), &cycles))
                goto exit_fail;
            break;
        case SWAP:
            if (!inst_swap(Dst, DATA(inst), &cycles))
                goto exit_fail;
            break;
        default:
            LOG_ERROR("unrecognized opcode (%i)\n", DATA(inst)->opcode);
            goto exit_fail;
        }

        if (DATA(inst)->flags & INST_FLAG_SAVE_CC) {
            | pop tmp1
            | pushfq
        }
    }

    | add qword state->inst_count, cycles
    | return -1

    size_t sz;
    if (dasm_link(&d, &sz) != 0) {
        LOG_ERROR("dasm_link failed\n");
        goto exit_fail;
    }
        
    void *buf = mmap(0, sz, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
    if (!buf) {
        LOG_ERROR("could not allocate memory for JIT compilation\n");
        goto exit_fail;
    }
    
    if (dasm_encode(&d, buf) != 0) {
        LOG_ERROR("dynasm_encode failed\n");
        goto exit_fail;
    }
    
    if (mprotect(buf, sz, PROT_READ | PROT_EXEC) != 0) {
        LOG_ERROR("could not make compiled function executable\n");
        goto exit_fail;
    }

    block->func = labels[lbl_f_start];
    block->mem = buf;
    block->size = sz;
    block->end_address = end_address;
    block->exec_count = 0;

    dasm_free(&d);

#ifdef DEBUG
    static int cg_count = 0;
    /* Write generated machine code to a temporary file.
     * View with:
     *   objdump -D -b binary -mi386 -Mx86-64 /tmp/jitcode?
     */
    char cg_filename[18];
    sprintf(cg_filename, "/tmp/jitcode%d", cg_count++);
    FILE *f = fopen(cg_filename, "wb");
    fwrite(buf, sz, 1, f);
    fclose(f);
#endif

    LOG_DEBUG("compilation successful!\n");

    return true;
    
exit_fail:
    dasm_free(&d);
    return false;
}
